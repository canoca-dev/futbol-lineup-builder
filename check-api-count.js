// API'deki toplam oyuncu sayƒ±sƒ±nƒ± bul
async function checkApiTotalCount() {
  console.log('üîç API toplam oyuncu sayƒ±sƒ±nƒ± kontrol ediyoruz...')
  
  try {
    // Method 1: Binary search ile maximum ID bul
    console.log('\nüìä Method 1: Binary search ile maximum bulma')
    let maxFound = await findMaxPlayers()
    console.log(`‚úÖ Binary search result: ~${maxFound.toLocaleString()} players`)
    
    // Method 2: √áok b√ºy√ºk offset ile test
    console.log('\nüìä Method 2: B√ºy√ºk offset testleri')
    const testOffsets = [100000, 200000, 300000, 400000, 500000, 1000000]
    
    for (const offset of testOffsets) {
      try {
        const response = await fetch(`https://api.lineup-builder.co.uk/api/25/player?offset=${offset}&limit=1`)
        const data = await response.json()
        const count = data.players?.length || 0
        console.log(`Offset ${offset.toLocaleString()}: ${count} players ${count > 0 ? '‚úÖ' : '‚ùå'}`)
        
        if (count === 0) {
          console.log(`üéØ Total players approximately: ${offset.toLocaleString()}`)
          break
        }
      } catch (error) {
        console.log(`Offset ${offset.toLocaleString()}: Error - ${error.message}`)
      }
      
      // Rate limiting
      await new Promise(resolve => setTimeout(resolve, 100))
    }
    
    // Method 3: Mevcut sync progress'imizle kar≈üƒ±la≈ütƒ±r
    console.log('\nüìä Method 3: Current sync progress')
    console.log('≈ûu anda sync edilen: ~91,000 players')
    console.log('API hala veri d√∂nd√ºr√ºyor, demek ki daha √ßok var')
    
  } catch (error) {
    console.error('‚ùå Error:', error)
  }
}

async function findMaxPlayers() {
  let low = 0
  let high = 1000000
  let maxFound = 0
  
  while (low <= high) {
    const mid = Math.floor((low + high) / 2)
    
    try {
      const response = await fetch(`https://api.lineup-builder.co.uk/api/25/player?offset=${mid}&limit=1`)
      const data = await response.json()
      
      if (data.players && data.players.length > 0) {
        maxFound = mid
        low = mid + 1
        console.log(`‚úÖ Found players at offset ${mid.toLocaleString()}`)
      } else {
        high = mid - 1
        console.log(`‚ùå No players at offset ${mid.toLocaleString()}`)
      }
      
      // Rate limiting
      await new Promise(resolve => setTimeout(resolve, 50))
      
    } catch (error) {
      console.log(`‚ö†Ô∏è Error at offset ${mid.toLocaleString()}: ${error.message}`)
      high = mid - 1
    }
  }
  
  return maxFound
}

checkApiTotalCount()
